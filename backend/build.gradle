buildscript {
  ext {
    kotlinVersion = "1.5.20"
    springBootVersion = "2.5.2"

    jacksonKotlinVersion = "2.12.3"
    kotlinLoggingVersion = "2.0.8"
    jjwtVersion = "0.11.2"

    kotlinJpaDslVersion = "2.0.0"
    JpaDslProjectionVersion = "2.0.2"
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
    classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
  }
}

// replace repositories with aliyun
allprojects {
  repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
    mavenLocal()
    mavenCentral()
  }
}

apply plugin: "idea"
apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-jpa"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = "com.tjh.riskfactor"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

//idea {
//  module {
//    def kaptMain = file("build/generated/source/kapt/main")
//    sourceDirs += kaptMain
//    generatedSourceDirs += kaptMain
//  }
//}

compileKotlin {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11
    freeCompilerArgs = ["-Xjsr305=strict"]
  }
}

compileTestKotlin {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11
    freeCompilerArgs = ["-Xjsr305=strict"]
  }
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-security")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  kapt("org.springframework.boot:spring-boot-configuration-processor")
  runtimeOnly("org.springframework.boot:spring-boot-devtools")
  // jdbc
  runtimeOnly("mysql:mysql-connector-java")
  // query dsl and projections
  implementation("au.com.console:kotlin-jpa-specification-dsl:$kotlinJpaDslVersion")
  implementation("th.co.geniustree.springdata.jpa:specification-with-projections:$JpaDslProjectionVersion")
  // logging wrapper
  implementation("io.github.microutils:kotlin-logging:$kotlinLoggingVersion")
  // kotlin
  implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
  implementation("org.jetbrains.kotlin:kotlin-reflect")
  // jackson
  implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
  // json web token
  compileOnly("io.jsonwebtoken:jjwt-api:$jjwtVersion")
  runtimeOnly("io.jsonwebtoken:jjwt-impl:$jjwtVersion")
  runtimeOnly("io.jsonwebtoken:jjwt-jackson:$jjwtVersion")

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    // 排除 junit 4
    exclude group: "junit", module: "junit"
    // 不需要 junit 4 兼容
    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
  }
  testCompileOnly("org.junit.jupiter:junit-jupiter-api")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
  testImplementation("org.junit.platform:junit-platform-launcher")
  // h2 database
  testRuntimeOnly("com.h2database:h2")
}

test {
  useJUnitPlatform()
}
