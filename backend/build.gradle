import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
  ext {
    kotlinVersion = "1.3.61"
    springBootVersion = "2.2.1.RELEASE"
  }
  repositories {
    jcenter()
  }
  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
    classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
  }
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-jpa"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = "com.tjh.riskfactor"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(KotlinCompile) {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11
    freeCompilerArgs = ["-Xjsr305=strict"]
  }
}

repositories {
  jcenter()
}

test {
  useJUnitPlatform()
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-security")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  kapt("org.springframework.boot:spring-boot-configuration-processor")
  runtimeOnly("org.springframework.boot:spring-boot-devtools")
  // jdbc
  runtimeOnly("mysql:mysql-connector-java:8.0.13")
  // logging wrapper
  implementation("io.github.microutils:kotlin-logging:1.7.7")
  // kotlin
  implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
  implementation("org.jetbrains.kotlin:kotlin-reflect")
  // kotlin logger
  implementation("io.github.microutils:kotlin-logging:1.7.6")
  // jackson
  implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
  // json web token
  compileOnly("io.jsonwebtoken:jjwt-api:0.10.7")
  runtimeOnly("io.jsonwebtoken:jjwt-impl:0.10.7")
  runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.10.7")

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    // 排除 junit 4
    exclude group: "junit", module: "junit"
    // 不需要 junit 4 兼容
    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
  }
  testCompileOnly("org.junit.jupiter:junit-jupiter-api")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
  testImplementation("org.junit.platform:junit-platform-launcher")
  testImplementation("org.mockito:mockito-junit-jupiter")
}
